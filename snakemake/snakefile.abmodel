# vim: syntax=python

rule training_hsnps:
    input:
        "ab_model/{sample}/hsnps.tab"
    output:
        rda="ab_model/{sample}/training.rda"
    resources:
        mem=4000
    benchmark:
        "ab_model/{sample}/training_benchmark.tsv"
    script:
        "scripts/training_hsnps_script.R"


# because bcftools REQUIRES gzipped VCFs
rule gzip_vcfs:
    input:
        joint_vcf="gatk/hc_raw.mmq60.vcf",
        phased_vcf=config['phaser'] + "/phased_hsnps.vcf"
    output:
        joint_vcf="gatk/hc_raw.mmq60.vcf.gz",
        phased_vcf=config['phaser'] + "/phased_hsnps.vcf.gz"
    resources:
        mem=2000
    shell:
        """
        bgzip -ci {input.joint_vcf} > {output.joint_vcf}
        tabix {output.joint_vcf}
        bgzip -ci {input.phased_vcf} > {output.phased_vcf}
        tabix {output.phased_vcf}
        """


rule training_hsnps_helper:
    input:
        joint_vcf="gatk/hc_raw.mmq60.vcf.gz",
        phased_vcf=config['phaser'] + "/phased_hsnps.vcf.gz"
    output:
        tab="ab_model/{sample}/hsnps.tab",
        combined_vcf="ab_model/{sample}/hsnps.vcf",
        tmp_vcf="ab_model/{sample}/hsnps_helper_tmp.vcf",
    params:
        sn="{sample}"
    resources:
        mem=4000
    shell:
        "bcftools merge "
        "    -o {output.tmp_vcf}"
        "    {input.joint_vcf} {input.phased_vcf} ; "
        "gatk SelectVariants"
        "    --java-options '-Xmx3G -Xms3G'"
        "    -R {config[ref]}"
        "    -V {output.tmp_vcf}"
        "    --sample-name {params.sn}"
        "    --sample-name phasedgt"
        "    --exclude-non-variants"
        "    --select-type-to-include SNP"
        "    -select 'vc.getGenotype(\"'{params.sn}'\").isCalled()'"
        "    -select 'vc.getGenotype(\"phasedgt\").isCalled()'"
        "    -select 'vc.isBiallelic()'"
        "    -O {output.combined_vcf} ; "
        "{config[scripts]}/totab.phase.sh {output.combined_vcf} {output.tab}"


rule abmodel_fit:
    input:
        lambda wildcards: 
            expand("ab_model/{sample}/{chr_prefix}{chr}/fit_step{abmodel_steps}.rda",
                sample=wildcards.sample, chr_prefix=config['chr_prefix'],
                chr=config['chrs'],
                abmodel_steps=config['abmodel_steps'])
    output:
        "ab_model/{sample}/fits.rda"
    resources:
        mem=1000
    script:
        "scripts/abmodel_fit_script.R"


rule abmodel_gather_by_chrom:
    input:
        lambda wildcards:
            expand("ab_model/{sample}/{chr_prefix}{chr}/logp_samples_step{abmodel_step}.{abmodel_chunk}.rda",
                sample=wildcards.sample,
                chr=wildcards.chr,
                chr_prefix=config['chr_prefix'],
                abmodel_step=wildcards.abmodel_step,
                abmodel_chunk=range(1, config["abmodel_chunks"]+1))
    output:
        fit="ab_model/{sample}/%s{chr}/fit_step{abmodel_step}.rda" % config['chr_prefix'],
        range="ab_model/{sample}/%s{chr}/param_ranges_step{abmodel_step}.rda" % config['chr_prefix']
    resources:
        mem=1000
    script:
        "scripts/abmodel_gather_by_chrom_script.R"


# Every step with abmodel_step > 1 will add the previous step's output
# to its input.  This allows the recursion to terminate when step=1.
def abmodel_scatter_input(wildcards):
    prf = ''
    d = dict()
    d['training'] = "ab_model/{sample}/training.rda",
    if int(wildcards.abmodel_step) > 1:
         prf = expand("ab_model/{sample}/{chr_prefix}{chr}/param_ranges_step{abmodel_prev_step}.rda",
                sample=wildcards.sample,
                chr=wildcards.chr,
                chr_prefix=config['chr_prefix'],
                abmodel_prev_step=int(wildcards.abmodel_step) - 1)
         d['param_ranges'] = prf
    return d

rule abmodel_scatter:
    input:
        unpack(abmodel_scatter_input)  
    output:
        "ab_model/{sample}/%s{chr}/logp_samples_step{abmodel_step}.{abmodel_chunk}.rda" % config['chr_prefix']
    params:
        chr="{chr}",
        seed="{abmodel_chunk}",
        step="{abmodel_step}",
        paramfile=lambda wildcards, input: \
            input.param_ranges if wildcards.abmodel_step != '1' else ''
    benchmark:
        "ab_model/{sample}/%s{chr}/benchmark_step{abmodel_step}.{abmodel_chunk}.tsv" % config['chr_prefix']
    resources:
        mem=1000
    script:
        "scripts/abmodel_scatter_script.R"
