# vim: syntax=python

# These should probably be converted to subworkflows at some point.
# For now, just for organizing rules into manageably-sized files.
include: "snakefile.callable_regions"
include: "snakefile.phasing"
include: "snakefile.training_hsnps"
include: "snakefile.cigars"

if config['abmodel_chunk_strategy']:
    include: "snakefile.abmodel_chunked"
else:
    include: "snakefile.abmodel_multithreaded"

# Use the new SCAN2 R object
include: "snakefile.genotype_object"
# legacy script with all work done by genotype.somatic(). does not allow
# for easily changing hard filters or FDR control.
#include: "snakefile.genotype_legacy     

include: "snakefile.select_gatk"

# Perform genotyping at ALL sites, not just somatic candidates.
# MUCH slower, but allows more data exploration and/or debugging
# of somatic filters.
#if config['score_all_sites']:
    #include: "snakefile.allsites"
#else:
    #include: "snakefile.candidates_only"


wildcard_constraints:
    chr='|'.join(str(x) for x in config['chrs']),
    gatk_chunk="\d+",
    gatk_mmq="\d+",
    #muttype="snv|indel|mosaic_snv",
    #muttype="snv|both|mosaic_snv",
    phaser="shapeit|eagle"


# Determine the analyses to run, depending on which options
# were selected by the user.
def determine_pipeline_output(wildcards):
    prf = ''
    d = dict()

    # Somatic indels and somatic SNVs
    d['indel_somatic_genotypes'] = expand("call_mutations/{sample}/scan2_object.rda",
        sample=config['sc_bams'].keys())

    # Mosaic SNVs
    if config['analyze_mosaic_snvs']:
        print("adding mosaic SNVs to schedule")
        d['mosaic_genotypes'] = expand("mosaic_snv/{sample}/somatic_genotypes.rda",
            sample=config['sc_bams'].keys())

    # Find bases passing minimum depth thresholds
    if config['callable_regions']:
        print("adding region callability to schedule")
        d['callable_beds'] = \
            expand("callable_regions/{sample}/callable_regions.rda",
                sample=config['sc_bams'].keys())

    return d


rule all:
    input:
        unpack(determine_pipeline_output)


rule gatkvcf_to_tab:
    input:
        "gatk/hc_raw.mmq{gatk_mmq}.vcf"
    output:
        vcf="gatk/mmq{gatk_mmq}.vcf",
        tab="gatk/mmq{gatk_mmq}.tab.gz",
        idx="gatk/mmq{gatk_mmq}.tab.gz.tbi"
    resources:
        mem=4000
    shell:
        "gatk SelectVariants"
        "   --java-options '-Xmx3G -Xms3G'"
        "   -R {config[ref]}"
        "   -V {input}"
        "   --restrict-alleles-to BIALLELIC"
        "   --exclude-non-variants"
        "   -select 'vc.getGenotype(\"{config[bulk_sample]}\").isCalled()'"
        "   -O {output.vcf} ; "
        "{config[scripts]}/totab.sh {output.vcf} /dev/stdout | bgzip -c > {output.tab} ; "
        "tabix -p vcf -S 1 {output.tab}"
