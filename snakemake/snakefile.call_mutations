# vim: syntax=python

# These should probably be converted to subworkflows at some point.
# For now, just for organizing rules into manageably-sized files.
include: "snakefile.select_gatk"
include: "snakefile.depth_profile"
include: "snakefile.phasing"
include: "snakefile.cigars"
include: "snakefile.integrated_table"
include: "snakefile.sensitivity"
include: "snakefile.abmodel_multithreaded"

# Use the new SCAN2 R object
include: "snakefile.genotype"


wildcard_constraints:
    chr='|'.join(str(x) for x in config['chrs']),
    gatk_chunk="\d+",
    gatk_mmq="\d+",
    phaser="shapeit|eagle"

if config['gatk_vcf'] is not None:
    # Contains a single rule that overrides gatk_gather for mmq60
    include: "snakefile.gatk_user_vcf"


# Probably no longer necessary
rule all:
    input:
        scan2_objects=expand("call_mutations/{sample}/scan2_object.rda",
            sample=config['sc_bams'].keys())


rule make_bulk_sample_file:
    input:
    output:
        bulk_sample_file=temp("call_mutations/bulk_sample_file.txt")
    localrule: True
    run:
        with open(output.bulk_sample_file, 'w') as f:
            f.write(config['bulk_sample'] + "\n")


rule select_analyzable_sites:
    input:
        bcf="gatk/hc_raw.mmq{gatk_mmq}.bcf",
        bulk_sample_file="call_mutations/bulk_sample_file.txt"
    output:
        bcf="call_mutations/hc_raw.mmq{gatk_mmq}.exnonvar_biallelic_bulkcalled.bcf",
        bcfidx="call_mutations/hc_raw.mmq{gatk_mmq}.exnonvar_biallelic_bulkcalled.bcf.csi",
    log:
        "call_mutations/hc_raw.mmq{gatk_mmq}.exnonvar_biallelic_bulkcalled.log",
    benchmark:
        "call_mutations/benchmark_select_analyzable_sites_mmq{gatk_mmq}.txt"
    resources:
        # Max RSS=9MB for a small test
        mem_mb=100
    shell:
        # The second bcftools view is needed to remove ALT="." sites. It seems that when
        # --trim-alt-alleles is used, the ALT field isn't updated before filtering.
        """
        bcftools view \
            --trim-alt-alleles \
            --include '(TYPE="snp" | TYPE="indel") & N_ALT=1 & GT[@{input.bulk_sample_file}] != "mis"' \
            -Ou \
            {input.bcf} \
        | bcftools view \
            --include 'ALT != "."' \
            -Ob -o {output.bcf}
        bcftools index {output.bcf} -o {output.bcfidx}
        """


rule tablefy_sites:
    input:
        bcf="call_mutations/hc_raw.mmq{gatk_mmq}.exnonvar_biallelic_bulkcalled.bcf",
        bcfidx="call_mutations/hc_raw.mmq{gatk_mmq}.exnonvar_biallelic_bulkcalled.bcf.csi",
    output:
        tab="call_mutations/mmq{gatk_mmq}.tab.gz",
        idx="call_mutations/mmq{gatk_mmq}.tab.gz.tbi"
    log:
        "call_mutations/mmq{gatk_mmq}.log"
    benchmark:
        "call_mutations/benchmark_tablefy_sites_mmq{gatk_mmq}.txt"
    resources:
        # Max RSS=1.4 for a small test
        mem_mb=100
    shell:
        # note the "|| true" fragment: bcftools query, when prevented from writing all
        # of its output as occurs with head -1, returns a non-0 exit code.  so we have
        # to short circuit it.
        """
        ((bcftools query \
            -f '#chr\\tpos\\tdbsnp\\trefnt\\taltnt[\\t%SAMPLE\\tref\\talt]\\n' \
            {input.bcf} || true) | head -1 ; \
         bcftools query \
            -f '%CHROM\\t%POS\\t%ID\\t%REF\\t%ALT[\\t%GT\\t%AD{{0}}\\t%AD{{1}}]\\n' \
            {input.bcf}) \
        | bgzip -c > {output.tab} 
        tabix -p vcf -S 1 {output.tab}
        """


rule call_mutations_benchmarks:
    input:
        # big hack: just listing the last benchmark file in the pipeline. will definitely break later
        expand("{final_step}/{sample}/benchmark_{filename}.txt",
            final_step='sensitivity' if config['compute_sensitivity'] else 'call_mutations',
            sample=config['sc_bams'].keys(),
            # The final benchmark file is called benchmark_genotype.txt for call_mutations,
            # benchmark_integrate.txt for sensitivity.
            filename='integrate' if config['compute_sensitivity'] else 'genotype')
    output:
        txt="call_mutations_collected_benchmarks.txt"
    log:
        "call_mutations_collected_benchmarks.log"
    threads: 1
    resources:
        mem_mb=1000
    shell:
        """
        {config[scripts]}/collect_benchmarks.sh . {output.txt}
        """
