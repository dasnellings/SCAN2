# vim: syntax=python

# These should probably be converted to subworkflows at some point.
# For now, just for organizing rules into manageably-sized files.
include: "snakefile.callable_regions"
include: "snakefile.gatk4_gvcf"
include: "snakefile.phasing"
include: "snakefile.abmodel"


wildcard_constraints:
    chr='|'.join(str(x) for x in config['chrs']),
    gatk_chunk="\d+",
    gatk_mmq="\d+",
    muttype="snv|indel|mosaic_snv",
    phaser="shapeit|eagle"



# Determine the analyses to run, depending on which options
# were selected by the user.
def determine_pipeline_output(wildcards):
    prf = ''
    d = dict()

    # Somatic SNVs
    if config['analyze_snvs']:
        print("adding somatic SNVs to schedule")
        d['somatic_genotypes'] = expand("snv/{sample}/somatic_genotypes.rda",
            sample=config['sc_bams'].keys())
        d['hsnp_spikein_genotypes'] = expand("snv/{sample}/hsnp_spikein_genotypes.rda",
            sample=config['sc_bams'].keys())
        if config['permute']:
            d['permuted_snvs'] = expand("snv/{sample}/permuted_sites.rda",
                sample=config['sc_bams'].keys())

    # Somatic indels
    if config['analyze_indels']:
        print("adding somatic indels to schedule")
        d['indel_somatic_genotypes'] = expand("indel/{sample}/somatic_genotypes.pon_filter.rda",
            sample=config['sc_bams'].keys())
        d['indel_hsnp_spikein_genotypes'] = expand("indel/{sample}/hsnp_spikein_genotypes.rda",
            sample=config['sc_bams'].keys())
        if config['permute']:
            d['permuted_indels'] = expand("indel/{sample}/permuted_sites.rda",
                sample=config['sc_bams'].keys())

    # Mosaic SNVs
    if config['analyze_mosaic_snvs']:
        print("adding mosaic SNVs to schedule")
        d['mosaic_genotypes'] = expand("mosaic_snv/{sample}/somatic_genotypes.rda",
            sample=config['sc_bams'].keys())

    # Find bases passing minimum depth thresholds
    if config['callable_regions']:
        print("adding region callability to schedule")
        d['callable_beds'] = \
            expand("callable_regions/{sample}/callable_regions.rda",
                sample=config['sc_bams'].keys())

    return d



rule all:
    input:
        unpack(determine_pipeline_output)


rule permute_snvs:
    input:
        rda="snv/{sample}/somatic_genotypes.rda",
        bed="callable_regions/{sample}/callable_regions.bed"
    output:
        "snv/{sample}/permuted_sites.rda"
    resources:
        mem=4000
    shell:
        "{config[scripts]}/permute.r {config[permute]} {input.rda} {input.bed} {output}"


rule permute_indels:
    input:
        rda="indel/{sample}/somatic_genotypes.pon_filter.rda",
        bed="callable_regions/{sample}/callable_regions.bed"
    output:
        "indel/{sample}/permuted_sites.rda"
    resources:
        mem=4000
    shell:
        "{config[scripts]}/permute.r 1000 {input.rda} {input.bed} {output}"



rule training_hsnps_helper:
    input:
        joint_vcf="gatk/hc_raw.mmq60.vcf",
        phased_vcf=config['phaser'] + "/phased_hsnps.vcf"
    output:
        tab="ab_model/{sample}/hsnps.tab",
        combined_vcf="ab_model/{sample}/hsnps.vcf",
        tmp_vcf="ab_model/{sample}/hsnps_helper_tmp.vcf",
    params:
        sn="{sample}"
    resources:
        mem=4000
    shell:
        "gatk3 -Xmx3G -Xms3G"
        "    -R {config[ref]}"
        "    -T CombineVariants"
        "    -V {input.joint_vcf}"
        "    -V {input.phased_vcf}"
        "    -o {output.tmp_vcf} ;"
        "gatk3 -Xmx3G -Xms3G"
        "    -R {config[ref]}"
        "    -T SelectVariants"
        "    -V {output.tmp_vcf}"
        "    -sn {params.sn}"
        "    -sn phasedgt"
        "    -env -trimAlternates"
        "    -select 'vc.getGenotype(\"'{params.sn}'\").isCalled()'"
        "    -select 'vc.getGenotype(\"phasedgt\").isCalled()'"
        "    -select 'vc.isBiallelic()'"
        "    -selectType SNP"
        "    -o {output.combined_vcf} ; "
        "{config[scripts]}/totab.phase.sh {output.combined_vcf} {output.tab}"



rule training_indels_helper:
    input:
        joint_vcf="gatk/hc_raw.mmq60.vcf",
        phased_vcf=config['phaser'] + "/phased_indels.vcf"
    output:
        tab="indel/{sample}/hsnps.tab",
        combined_vcf="indel/{sample}/hsnps.vcf",
        tmp_vcf="indel/{sample}/hsnps_helper_tmp.vcf",
    params:
        sn="{sample}"
    resources:
        mem=4000
    shell:
        "gatk3 -Xmx3G -Xms3G"
        "    -R {config[ref]}"
        "    -T CombineVariants"
        "    -V {input.joint_vcf}"
        "    -V {input.phased_vcf}"
        "    -o {output.tmp_vcf} ;"
        "gatk3 -Xmx3G -Xms3G"
        "    -R {config[ref]}"
        "    -T SelectVariants"
        "    -V {output.tmp_vcf}"
        "    -sn {params.sn}"
        "    -sn phasedgt"
        "    -env -trimAlternates"
        "    -select 'vc.getGenotype(\"'{params.sn}'\").isCalled()'"
        "    -select 'vc.getGenotype(\"phasedgt\").isCalled()'"
        "    -select 'vc.isBiallelic()'"
        "    -selectType INDEL"
        "    -o {output.combined_vcf} ; "
        "{config[scripts]}/totab.phase.sh {output.combined_vcf} {output.tab}"



rule training_hsnps:
    input:
        "ab_model/{sample}/hsnps.tab"
    output:
        rda="ab_model/{sample}/training.rda"
    resources:
        mem=4000
    benchmark:
        "ab_model/{sample}/training_benchmark.tsv"
    script:
        "scripts/training_hsnps_script.R"



rule training_indels:
    input:
        "indel/{sample}/hsnps.tab"
    output:
        rda="indel/{sample}/training.rda"
    resources:
        mem=4000
    script:
        "scripts/training_indels_script.R"




rule scansnv_vcftotab:
    input:
        "gatk/hc_raw.mmq{gatk_mmq}.vcf"
    output:
        vcf="snv/mmq{gatk_mmq}.vcf",
        tab="snv/mmq{gatk_mmq}.tab"
    resources:
        mem=4000
    shell:
        "gatk3 -Xmx3G -Xms3G"
        "   -T SelectVariants"
        "   -R {config[ref]}"
        "   -V {input}"
        "   -selectType SNP -restrictAllelesTo BIALLELIC"
        "   -env -trimAlternates"
        "   -select 'vc.getGenotype(\"{config[bulk_sample]}\").isCalled()'"
        "   -o {output.vcf} ; "
        "{config[scripts]}/totab.sh {output.vcf} {output.tab}"



# Probably want some additional parsing here
rule scansnv_vcftotab_indel:
    input:
        "gatk/hc_raw.mmq{gatk_mmq}.vcf"
    output:
        vcf="indel/mmq{gatk_mmq}.vcf",
        tab="indel/mmq{gatk_mmq}.tab"
    resources:
        mem=4000
    shell:
        "gatk3 -Xmx3G -Xms3G"
        "   -T SelectVariants"
        "   -R {config[ref]}"
        "   -V {input}"
        "   -selectType INDEL -restrictAllelesTo BIALLELIC"
        "   -env -trimAlternates"
        "   -select 'vc.getGenotype(\"{config[bulk_sample]}\").isCalled()'"
        "   -o {output.vcf} ; "
        "{config[scripts]}/totab.indel.sh {output.vcf} {output.tab}"


rule scansnv_sample_hsnps:
    input:
        vcf=lambda wildcards:
            config['phaser'] + ("/phased_hsnps.vcf" if wildcards.muttype == 'snv' else "/phased_indels.vcf"),
        somatic_pos="{muttype}/somatic_positions.%s{chr}.tab" % config['chr_prefix']
    output:
        rda="{muttype}/hsnp_spikein_positions.%s{chr}.rda" % config['chr_prefix'],
        resample_rda="{muttype}/hsnp_spikein_resample.%s{chr}.rda" % config['chr_prefix'],
        pdf="{muttype}/hsnp_spikein_resample.%s{chr}.pdf" % config['chr_prefix'],
        tab="{muttype}/hsnp_spikein_positions.%s{chr}.tab" % config['chr_prefix']
    resources:
        mem=8000
    script:
        "scripts/scansnv_sample_hsnps_script.R"


rule scansnv_somatic_sites:
    input:
        "{muttype}/mmq60.tab"
    output:
        "{muttype}/somatic_positions.%s{chr}.tab" % config['chr_prefix']
    resources:
        mem=32000
    script:
        "scripts/scansnv_somatic_sites_script.R"



rule scansnv_count_cigars:
    input:
        sites="{muttype}/{vartype}_positions.%s{chr}.tab" % config['chr_prefix'],
        bam=lambda wildcards: config['bam_map'][wildcards.sample]
    output:
        txt="{muttype}/{sample}/{vartype}_cigars.%s{chr}.txt" % config['chr_prefix'],
        tab="{muttype}/{sample}/{vartype}_cigars.%s{chr}.tab" % config['chr_prefix']
    resources:
        mem=1000
    shell:
        "{config[scripts]}/get_cigars.sh {input.sites} {input.bam} {output.txt} ; "
        "{config[scripts]}/count_cigars.py {output.txt} > {output.tab}"



rule scansnv_cigar_gather:
    input:
        lambda wildcards:
            expand("{muttype}/{sample}/{vartype}_cigars.{chr_prefix}{chr}.tab",
                muttype=wildcards.muttype,
                sample=wildcards.sample,
                chr_prefix=config['chr_prefix'],
                vartype=wildcards.vartype, chr=config['chrs'])
    output:
        "{muttype}/{sample}/{vartype}_cigars.tab"
    resources:
        mem=1000
    script:
        "scripts/scansnv_cigar_gather_script.R"



rule scansnv_estimate_ab_scatter:
    input:
        fits="ab_model/{sample}/fits.rda",
        training="ab_model/{sample}/training.rda",
        sites="{muttype}/{type}_positions.%s{chr}.tab" % config['chr_prefix']
    output:
        "{muttype}/{sample}/{type}_ab.%s{chr}.rda" % config['chr_prefix']
    params:
        # Only germline SNPs are used for the inference, so indels are
        # never spikeins even when we are inferring at a germline indel.
        flag=lambda wildcards:
            "somatic" if wildcards.type == 'somatic' or wildcards.muttype == 'indel' else 'hsnp_spikein'
    resources:
        mem=1000
    benchmark:
        "{muttype}/{sample}/benchmark_{type}_ab.%s{chr}.tsv" % config['chr_prefix']
    shell:
        "{config[scripts]}/estimate_ab.R"
        "   {input.fits} {input.training} {input.sites} {params} {output}"
        


rule scansnv_cigar_tuning:
    input:
        sc="{muttype}/{sample}/hsnp_spikein_cigars.tab",
        bulk="{muttype}/%s/hsnp_spikein_cigars.tab" % config['bulk_sample']
    output:
        "{muttype}/{sample}/cigar_tuning.rda"
    resources:
        mem=1000
    script:
        "scripts/scansnv_cigar_tuning_script.R"



rule scansnv_fdr_tuning:
    input:
        mmq60="{muttype}/mmq60.tab",
        mmq1="{muttype}/mmq1.tab",
        hsnps=lambda wildcards:
            "ab_model/{sample}/training.rda" if wildcards.muttype == 'snv' or wildcards.muttype == "mosaic_snv" else "indel/{sample}/training.rda",
        som_sites=lambda wildcards:
            expand("{muttype}/somatic_positions.{chr_prefix}{chr}.tab",
                muttype=wildcards.muttype,
                chr_prefix=config['chr_prefix'],
                chr=config['chrs'])
    output:
        "{muttype}/{sample}/fdr_tuning.rda"
    params:
        sample="{sample}",
        bulk_sample=config['bulk_sample']
    resources:
        mem=5000
    benchmark:
        "{muttype}/{sample}/benchmark_fdr_tuning.tsv"
    shell:
        "{config[scripts]}/fdr_tuning.R"
        "   {input.mmq60} {input.mmq1}"
        "   {input.hsnps}"
        "   {params.bulk_sample} {params.sample}"
        "   {output} somatic"
        "   {config[min_sc_alt]} {config[min_sc_dp]} {config[min_bulk_dp]}"
        "   {input.som_sites}"



rule scansnv_genotype_scatter:
    input:
        mmq60="{muttype}/mmq60.tab",
        mmq1="{muttype}/mmq1.tab",
        som_ab="{muttype}/{sample}/{vartype}_ab.%s{chr}.rda" % config['chr_prefix'],
        sc_cigars="{muttype}/{sample}/{vartype}_cigars.%s{chr}.tab" % config['chr_prefix'],
        bulk_cigars="{muttype}/%s/{vartype}_cigars.%s{chr}.tab" % \
            (config['bulk_sample'], config['chr_prefix']),
        cigar_tuning="{muttype}/{sample}/cigar_tuning.rda",
        fdr_tuning="{muttype}/{sample}/fdr_tuning.rda",
    output:
        "{muttype}/{sample}/{vartype}_genotypes.%s{chr}.rda" % config['chr_prefix']
    params:
        sc_sample="{sample}",
        flag=lambda wildcards:
            'somatic' if wildcards.vartype == 'somatic' else 'spikein'
    resources:
        mem=5000
    benchmark:
        "{muttype}/{sample}/benchmark_{vartype}_genotypes.%s{chr}.tsv" % config['chr_prefix']
    shell:
        "{config[scripts]}/genotype.R"
        "   {input.mmq60} {input.mmq1}"
        "   {params.sc_sample} {config[bulk_sample]} {input.som_ab}"
        "   {input.sc_cigars} {input.bulk_cigars} {input.cigar_tuning}"
        "   {output} {config[target_fdr]} {input.fdr_tuning} {params.flag}"
        "   {config[min_sc_alt]} {config[min_sc_dp]} {config[min_bulk_dp]}"



rule scansnv_genotype_gather:
    input:
        lambda wildcards:
            expand("{muttype}/{sample}/{vartype}_genotypes.{chr_prefix}{chr}.rda",
                vartype=wildcards.vartype,
                muttype=wildcards.muttype,
                sample=wildcards.sample,
                chr_prefix=config['chr_prefix'],
                chr=config['chrs'])
    output:
        "{muttype}/{sample}/{vartype}_genotypes.rda"
    params:
        varname=lambda wildcards:
            'somatic' if wildcards.vartype == 'somatic' else 'spikeins',
    resources:
        mem=5000
    script:
        "scripts/scansnv_genotype_gather_script.R"



rule scansnv_indel_pon:
    input:
        rda="indel/{sample}/somatic_genotypes.rda"
    output:
        rda="indel/{sample}/somatic_genotypes.pon_filter.rda"
    resources:
        mem=6000
    benchmark:
        "indel/{sample}/benchmark_pon_filter.tsv"
    script:
        "scripts/scansnv_indel_pon_script.R"


#######################################################################
# Only mosaic and joint calling below this line.
#######################################################################

rule scansnv_copy_table_to_mosaic:
    input:
        mmq60="snv/mmq60.tab",
        mmq1="snv/mmq1.tab"
    output:
        mmq60="mosaic_snv/mmq60.tab",
        mmq1="mosaic_snv/mmq1.tab",
    resources:
        mem=2000
    shell:
        """
        cp {input.mmq60} {output.mmq60}
        cp {input.mmq1} {output.mmq1}
        """

rule scansnv_mosaic_sites:
    input:
        "mosaic_snv/mmq60.tab"
    output:
        "mosaic_snv/mosaic_positions.%s{chr}.tab" % config['chr_prefix']
    resources:
        mem=32000
    script:
        "scripts/scansnv_mosaic_sites_script.R"

rule scansnv_fdr_tuning_mosaic:
    input:
        mmq60="mosaic_snv/mmq60.tab",
        mmq1="mosaic_snv/mmq1.tab",
        hsnps="ab_model/{sample}/training.rda",
        som_sites=expand("mosaic_snv/mosaic_positions.{chr_prefix}{chr}.tab",
            chr_prefix=config['chr_prefix'], chr=config['chrs'])
    output:
        "mosaic_snv/{sample}/fdr_tuning_mosaic.rda"
    params:
        sample="{sample}",
        bulk_sample=config['bulk_sample']
    resources:
        mem=5000
    benchmark:
        "mosaic_snv/{sample}/benchmark_fdr_tuning_mosaic.tsv"
    shell:
        "{config[scripts]}/fdr_tuning.R"
        "   {input.mmq60} {input.mmq1}"
        "   {input.hsnps}"
        "   {params.bulk_sample} {params.sample}"
        "   {output} somatic"
        "   {config[min_sc_alt]} {config[min_sc_dp]} {config[min_bulk_dp]}"
        "   {input.som_sites}"

rule scansnv_genotype_mosaic_scatter:
    input:
        mmq60="mosaic_snv/mmq60.tab",
        mmq1="mosaic_snv/mmq1.tab",
        som_ab="mosaic_snv/{sample}/mosaic_ab.%s{chr}.rda" % config['chr_prefix'],
        sc_cigars="mosaic_snv/{sample}/mosaic_cigars.%s{chr}.tab" % config['chr_prefix'],
        bulk_cigars="mosaic_snv/%s/mosaic_cigars.%s{chr}.tab" % \
            (config['bulk_sample'], config['chr_prefix']),
        cigar_tuning="snv/{sample}/cigar_tuning.rda",
        fdr_tuning="mosaic_snv/{sample}/fdr_tuning_mosaic.rda",
    output:
        "mosaic_snv/{sample}/mosaic_genotypes.%s{chr}.rda" % config['chr_prefix']
    params:
        sc_sample="{sample}"
    resources:
        mem=5000
    benchmark:
        "mosaic_snv/{sample}/benchmark_mosaic_genotypes.%s{chr}.tsv" % config['chr_prefix']
    shell:
        "{config[scripts]}/genotype.R"
        "   {input.mmq60} {input.mmq1}"
        "   {params.sc_sample} {config[bulk_sample]} {input.som_ab}"
        "   {input.sc_cigars} {input.bulk_cigars} {input.cigar_tuning}"
        "   {output} {config[fdr]} {input.fdr_tuning} spikein"
        "   {config[min_sc_alt]} {config[min_sc_dp]} {config[min_bulk_dp]}"

rule scansnv_genotype_mosaic_gather:
    input:
        filelist=lambda wildcards:
            expand("mosaic_snv/{sample}/mosaic_genotypes.{chr_prefix}{chr}.rda",
                sample=wildcards.sample,
                chr_prefix=config['chr_prefix'],
                chr=config['chrs'])
    output:
        "mosaic_snv/{sample}/mosaic_genotypes.rda"
    resources:
        mem=6000
    script:
        "scripts/scansnv_genotype_mosaic_gather_script.R"
