# vim: syntax=python

rule abmodel_gather:
    input:
        lambda wildcards:
            # If the user supplied a fit file, do not depend on the chromosome level
            # fit_{chr}.rda files or else abmodel_scatter will be triggered.
            config['abmodel_use_fit'][wildcards.sample] if wildcards.sample in config['abmodel_use_fit'] else expand("ab_model/{sample}/fit_{chr}.rda",
                    sample=wildcards.sample,
                    chr=config['chrs'])
    output:
        fits="ab_model/{sample}/fits.rda",
        fit_details="ab_model/{sample}/fit_details.rda"
    params:
        use_fit=lambda wildcards: wildcards.sample in config['abmodel_use_fit']
    log:
        "ab_model/{sample}/abmodel_gather.log"
    benchmark:
        "ab_model/{sample}/benchmark_abmodel_gather.txt"
    resources:
        mem_mb=1000
    script:
        "scripts/abmodel_gather_tiled_script.R"


rule abmodel_scatter:
    input:
        config="scan.yaml",
        inttab="call_mutations/integrated_table.tab.gz",
        inttabidx="call_mutations/integrated_table.tab.gz.tbi"
    output:
        rda="ab_model/{sample}/fit_{chr}.rda"
    params:
        sc_sample="{sample}",
        chrom="{chr}",
        n_tiles=config['abmodel_hsnp_n_tiles']
    log:
        "ab_model/{sample}/abmodel_scatter_{chr}.log"
    benchmark:
        "ab_model/{sample}/benchmark_abmodel_scatter_{chr}.tsv"
    threads: config['abmodel_n_cores']
    resources:
        mem_mb=1000*config['abmodel_n_cores']  # 1 GB per core
    script:
        "scripts/abmodel_scatter_chrom_tiled_script.R"
