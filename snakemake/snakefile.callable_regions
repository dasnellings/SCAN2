# vim: syntax=python

rule callable_region_gather:
    input:
        rdas=lambda wildcards:
            expand("callable_regions/{sample}/table_chunk{gatk_chunk}.rda",
                sample=wildcards.sample,
                gatk_chunk=range(1, config['gatk_chunks']+1))
    output:
        rda="callable_regions/{sample}/callable_regions.rda",
        pdf="callable_regions/{sample}/callable_regions.pdf"
    resources:
        mem=4000
    script:
        "scripts/callable_regions_gather_script.R"

          
# Both summarizes a vector into a (2-dimensional) table and adds
# bulk depth information.
# The memory limit here can be insufficient if the size of each
# GATK chunk is large (>10MB or so).
rule callable_region_summarize:
    input:
        sc="callable_regions/gatk_depthofcoverage/chunk{gatk_chunk}.txt",
    output:
        "callable_regions/{sample}/table_chunk{gatk_chunk}.rda",
    resources:
        mem=7000
    script:
        "scripts/callable_regions_summarize_script.R"


# Needs to match parallelization of GATK scattering, else the
# callable regions will not match the actual genotyped area.
# Also needs to match GATK filtering (mapping quality, additional
# default HaplotypeCaller read filters) to be meaningful.
rule callable_region_scatter:
    input:
        scbam=lambda wildcards: config['bam_map'][wildcards.sample]
    output:
        tmp="callable_regions/gatk_depthofcoverage/chunk{gatk_chunk}.tmp.txt",
        txt="callable_regions/gatk_depthofcoverage/chunk{gatk_chunk}.txt"
    params:
        bams=" ".join([ "-I " + bam for bam in config['bam_map'].values() ]),
        regionflag=lambda wildcards:
            "-L " + config['gatk_regions'][int(wildcards.gatk_chunk) - 1],
    benchmark:
        "callable_regions/gatk_depthofcoverage/benchmark_depthofcoverage_chunk{gatk_chunk}.txt"
    resources:
        mem=6000
    shell:
        """
        gatk DepthOfCoverage \
            --java-options '-Xmx5G -Xms5G' \
            -R {config[ref]} \
            {params.bams} \
            {params.regionflag} \
            --minimum-mapping-quality 60 \
            --read-filter NotSecondaryAlignmentReadFilter \
            --read-filter GoodCigarReadFilter 
            --read-filter NonZeroReferenceLengthAlignmentReadFilter \
            --read-filter PassesVendorQualityCheckReadFilter \
            --read-filter MappedReadFilter \
            --read-filter MappingQualityAvailableReadFilter \
            --read-filter NotDuplicateReadFilter \
            --read-filter MappingQualityReadFilter \
            --read-filter WellformedReadFilter \
            --omit-interval-statistics true \
            --omit-locus-table true \
            --omit-per-sample-statistics true \
            --output-format TABLE \
            -O {output.tmp}
        (echo 'chr:pos:{params.sample}' ; tail -n +2 {output.tmp}) \
            | tr ':' '\t' 
            | cut -f1-3 > {output.txt}
        """
